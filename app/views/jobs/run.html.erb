<% content_for :head do %>
  <script style="text/javascript">

    var RubySwarm = {

      timeout: 20,
      timerStatusEl: null,
      runStatusEl: null,
      testEl: null,
      updateTimer: null,
      updateCountdown: null,
      currentRun: null,
      tickerTimer: null,

      testSuccess: function(msg){
        this.runStatusEl.html(msg);

        var self = this;
        setTimeout(function(){ self.startCountdown(); }, 3000);
      },

      testError: function(error){
        this.runStatusEl.html(error);

        var self = this;
        setTimeout(function(){ self.startCountdown(); }, 3000);
      },

      startCountdown: function(){
        this.updateCountdown = <%= RubySwarm::RUN_UPDATE_FREQUENCY %>;
        this.timerTick();
      },

      timerTick: function(){
        var self = this;

        if (this.tickerTimer) clearTimeout(this.tickerTimer);

        this.updateCountdown = this.updateCountdown - 1;

        if (this.updateCountdown === 0) {
          this.timerStatusEl.html('');
          this.runStatusEl.html('Finding Tests...');

          this.currentRun = new RubySwarm.Run({
            testEl: this.testEl,
            gotData: function(){ self.runStatusEl.html("Loading..."); },
            loaded: function(){ self.runStatusEl.html("Running..."); },
            success: function(msg){ self.testSuccess(msg); },
            error: function(error){ self.testError(error); }
          });
          this.currentRun.get();
        } else {
          this.timerStatusEl.html('Update in '+this.updateCountdown);
          this.tickerTimer = setTimeout(function(){ self.timerTick(); }, 1000);
        }
      },

      submitTest: function(params){
        console.log('submitTest', params);
        if (this.currentRun) {
          this.currentRun.submit(params);
        } else {
          console.error("No current test!");
        }
      },

      keepalive: function(){
        console.log('keepalive', params);
        if (this.currentRun) {
          this.currentRun.startTimeout();
        } else {
          console.error("No current test!");
        }
      }

    };

    RubySwarm.Run = function(attrs){
      this.testEl = attrs.testEl;
      this.gotData = attrs.gotData;
      this.loaded = attrs.loaded;
      this.success = attrs.success;
      this.error = attrs.error;
    };

    $.extend(RubySwarm.Run.prototype, {
      /**
        Get job data
      */
      get: function(){
        var self = this;
        $.ajax({
          url: '<%= get_runs_path(:format => :json) %>',
          success: function(data){ self.processData(data); },
          error: function(req, msg){ self.handleError(msg); }
        });
      },

      /**
        Process job data
      */
      processData: function(data) {
        var self = this;

        if (data.run) {
          this.gotData();

          this.id = data.run.id;
          this.testEl.attr('src', data.run.url);

          var loadFunc = function(){
            self.testEl.unbind('load', loadFunc);
            self.startTests();
          };
          this.testEl.bind('load', loadFunc);
        } else {
          this.error(data.message || "Unknown Error");
        }
      },

      /**
        Handle error
      */
      handleError: function(msg){
        this.error("Error: "+msg);
      },

      /**
        Start tests running
      */
      startTests: function(){
        var self = this, testWin;
        try {
          testWin = this.testEl[0].contentWindow;
        } catch (e){};
        if (testWin && testWin.RubySwarmRunner) {
          this.loaded();
          this.startTimeout();
        } else {
          this.error("No tests to run");
        }
      },

      startTimeout: function(){
        this.stopTimeout();

        var self = this;
        this.timeoutTimer = setTimeout(function(){ self.timedout(); }, RubySwarm.timeout * 1000);
      },

      stopTimeout: function(){
        if (this.timeoutTimer) clearTimeout(this.timeoutTimer);
      },

      timedout: function(){
        this.submit({ fail: -1, total: -1 });
      },

      /**
        Submit results
      */
      submit: function(params) {
        this.stopTimeout();

        $.ajax({
          url:  '<%= run_path('000', :format => :json) %>'.replace('000', this.id),
          type: 'POST',
          data: {
            _method: 'PUT',
            run: {
              fail: params.fail || 0,
              error: params.error || 0,
              total: params.total || 0
            }
          },
          dataType: 'json',
          success: function(){
            console.log('Success');
          },
          error: function(r, msg){
            console.log("Error: "+msg);
          }
        });
        if (params.total === -1) {
          this.error("Couldn't run tests");
        } else {
          this.success("Results -- Fail: "+params.fail+", Error: "+params.error+", Total: "+params.total);
        }
      }

    });

    $(document).ready(function(){
      RubySwarm.timerStatusEl = $('#timer_status');
      RubySwarm.runStatusEl = $('#run_status');
      RubySwarm.testEl = $('#test_runner');
      RubySwarm.startCountdown();
    });
  </script>
<% end %>

<%= @client.inspect %>

<div id="timer_status"></div>
<div id="run_status"></div>

<iframe id="test_runner" style="width: 100%; min-width: 800px; height: 600px"></iframe>
